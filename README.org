#+TITLE: Michael Shelton's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything

* Emacs Initialization File
  #+PROPERTY: EXPORT_FILE_NAME README.md

** TODO make =(C-c C-l)= use file completion when =file:= is used
** TODO figure out how to quickly reindent code blocks
** TODO Fix =use-package= weirdness with =org-mode=
 
** Bootstrapping
   The endgoal here is to have an easily shareable, readable, and reproducable emacs setup.
   When you clone this repository you'll have two main files: [[file:init.el][init.el]] and [[file:README.org][README.org]].

*** [[file:init.el][init.el]]
    This is the entry point to the entire configuration process. When you first clone this repo [[file:init.el][init.el]] should look like this: 
    #+BEGIN_SRC emacs-lisp :tangle no
      ;;; .emacs --- Emacs initialization file -*- lexical-binding: t; -*-

      ;; This file replaces itself with the actual configuration at first run.

      ;; We can't tangle without org!
      (require 'org)
      ;; Open the configuration
      (find-file (concat user-emacs-directory "README.org"))
      ;; tangle it
      (org-babel-tangle)
      ;; load it
      (load-file (concat user-emacs-directory "init.el"))
      ;; finally byte-compile it
      (byte-compile-file (concat user-emacs-directory "init.el"))
    #+END_SRC
    This code will load org mode, move specified code blocks from [[file:README.org][README.org]] to [[file:init.el][init.el]] and then byte compile it. 

*** [[file:README.org][README.org]]
    This is where the main configuration goes. Any code blocks that have the =:tangle yes= will be used to construct the final 
    init.el file through the function  =(org-babel-tangle)=. The initial processesing of [[file:README.org][README.org]] will be triggered by [[file:init.el][init.el]].
    Subsequent init.el generations are through this =after-save-hook= on [[file:README.org][README.org]]

    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun tangle-init ()
        "If the current buffer is 'README.org' the code-blocks are
      tangled, and the tangled file is compiled."
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "README.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle "init.el")
            (byte-compile-file (concat user-emacs-directory "init.el")))))

      (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

    We then load up a couple packages:
      1. Fancy package manager [[https://github.com/raxod502/straight.el][straight.el]]
      2. A nicer package configuration framework [[https://github.com/jwiegley/use-package][use-package]]
      3. An updated version of [[https://orgmode.org/][org-mode]]

      #+BEGIN_SRC emacs-lisp :tangle yes
        (let ((bootstrap-file (concat user-emacs-directory "straight/repos/straight.el/bootstrap.el"))
              (bootstrap-version 3))
          (unless (file-exists-p bootstrap-file)
            (with-current-buffer
                (url-retrieve-synchronously
                 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                 'silent 'inhibit-cookies)
              (goto-char (point-max))
              (eval-print-last-sexp)))
          (load bootstrap-file nil 'nomessage))

        (straight-use-package 'use-package)
        (require 'use-package)
        (setq straight-use-package-by-default t)
        (require 'bind-key)
        (use-package org)
      #+END_SRC
      
    We also add an after save hook to automatically generate a new [[file:README.md][README.md]] 
    #+BEGIN_SRC emacs-lisp :tangle yes
      (require 'ox-md)
      (use-package ox-gfm)
      (defun export-readme ()
        "If the current buffer is 'README.org' export it to 'README.md'"
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "README.org")))
          (org-gfm-export-to-markdown)))
      (add-hook 'after-save-hook 'export-readme)
    #+END_SRC
    Now we have a nice base to start from

** Configuration
Defining functions for computer specific configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun system-is-workstation ()
    (interactive)
    "Return true if the system we are running is my work desktop at Google"
    (string-equal (system-name) "meshelton.nyc.corp.google.com")
    )
#+END_SRC

Personal Information
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Michael Shelton"
        user-mail-address "michael.e.shelton@gmail.com")
  (if (system-is-workstation)
      (setq user-mail-address "meshelton@google.com")
    )
#+END_SRC

Backup
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  (setq backup-by-copying t)
#+END_SRC

Google specific emacs packages
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (system-is-workstation)
      (require 'google)
    (require 'p4-google)                ;; g4-annotate, improves find-file-at-point
    (require 'compilation-colorization) ;; colorizes output of (i)grep
    (require 'rotate-clients)           ;; google-rotate-client
    (require 'rotate-among-files)       ;; google-rotate-among-files
    (require 'googlemenu)               ;; handy Google menu bar
    (require 'p4-files)                 ;; transparent support for Perforce filesystem
    (require 'google3-build)            ;; support for blaze builds
    (require 'csearch)                  ;; Search the whole Google code base.
    )
#+END_SRC

Appearance
#+BEGIN_SRC emacs-lisp :tangle yes
  (load-theme 'wombat 1)
  (global-linum-mode 0)
  (column-number-mode 1)
  (line-number-mode 1)
  (setq inhibit-startup-screen 1)
  (show-paren-mode 1)
  (tool-bar-mode -1)
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq compilation-scroll-output 'first-error)
#+END_SRC

Multiple Cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-^" . 'mc/mark-all-like-this)))

#+END_SRC

Visual Regular Expressions
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp
    :bind (("C-c C-r" . 'vr/replace)
           ("C-c C-q" . 'vr/query-replace)))
  (use-package visual-regexp-steroids
    :bind ("C-c C-m" . 'vr/mc-mark))
#+END_SRC

Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit)
#+END_SRC


