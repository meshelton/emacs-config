#+TITLE: Michael Shelton's Emacs configuration
#+OPTIONS: toc:4 h:4
 
* Emacs Initialization File
 
** Bootstrapping
   The endgoal here is to have an easily shareable, readable, and reproducable emacs setup.
   When you clone this repository you'll have two main files: [[file:init.el][init.el]] and [[file:README.org][README.org]].

*** [[file:init.el][init.el]]
    This is the entry point to the entire configuration process. When you first clone this repo [[file:init.el][init.el]] should look like this: 
    #+BEGIN_SRC emacs-lisp :tangle no
      ;;; .emacs --- Emacs initialization file -*- lexical-binding: t; -*-

      ;; This file replaces itself with the actual configuration at first run.

      ;; We can't tangle without org!
      (require 'org)
      ;; Open the configuration
      (find-file (concat user-emacs-directory "README.org"))
      ;; tangle it
      (org-babel-tangle)
      ;; load it
      (load-file (concat user-emacs-directory "init.el"))
      ;; finally byte-compile it
      (byte-compile-file (concat user-emacs-directory "init.el"))
    #+END_SRC
    This code will load org mode, move specified code blocks from [[file:README.org][README.org]] to [[file:init.el][init.el]] and then byte compile it. 

*** [[file:README.org][README.org]]
    This is where the main configuration goes. Any code blocks that have the =:tangle ./init.el= will be used to construct the final 
    init.el file through the function  =(org-babel-tangle)=. The initial processesing of [[file:README.org][README.org]] will be triggered by [[file:init.el][init.el]].

    Then we load up a couple packages:
    1. [[https://github.com/jwiegley/use-package][use-package]] :: A nicer package configuration framework
    2. [[https://orgmode.org/][org-mode]] :: A package for literate programming and so much more

    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (require 'package)
      (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                               ("marmalade" . "https://marmalade-repo.org/packages/")
                               ("melpa" . "https://melpa.org/packages/")
                               ("org" . "https://orgmode.org/elpa/")))
      (package-initialize)

      (unless (package-installed-p 'use-package)
        (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)
      (use-package org
                   :bind ("C-c l" . 'org-store-link))
    #+END_SRC

    Subsequent init.el generations are through this =after-save-hook= on [[file:README.org][README.org]]
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (defun tangle-init ()
        "If the current buffer is 'README.org' the code-blocks are
      tangled, and the tangled file is compiled."
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "README.org")))
          ;; Avoid running hooks when tangling.
          (let ((prog-mode-hook nil))
            (org-babel-tangle)
            (byte-compile-file (concat user-emacs-directory "init.el")))))

      (add-hook 'after-save-hook 'tangle-init)
    #+END_SRC

    We also add an after save hook to automatically generate a new [[file:README.md][README.md]] 
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (require 'ox-md)
      (use-package ox-gfm)
      (defun export-readme ()
        "If the current buffer is 'README.org' export it to 'README.md'"
        (when (equal (buffer-file-name)
                     (expand-file-name (concat user-emacs-directory "README.org")))
          (org-gfm-export-to-markdown)))
      (add-hook 'after-save-hook 'export-readme)
    #+END_SRC

** Configuration

*** Per System Configuration
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (defun system-is-home-desktop ()
        (interactive)
        "Return true if the system we are running is my personal desktop"
        (string-equal (system-name) "DESKTOP-C2EK1OP"))
      (defun system-is-home-desktop-wsl ()
        (interactive)
        "Return true if the system we are running is my personal desktop"
        (string-equal (system-name) "DESKTOP-6PNIEF5"))
    #+END_SRC

*** Personal Information
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (setq user-full-name "Michael Shelton"
            user-mail-address "michael.e.shelton@gmail.com")
    #+END_SRC

*** Backup
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
      (setq delete-old-versions -1)
      (setq version-control t)
      (setq vc-make-backup-files t)
      (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
      (setq backup-by-copying t)
    #+END_SRC

*** Appearance
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (load-theme 'wombat 1)
      (global-linum-mode 0)
      (column-number-mode 1)
      (line-number-mode 1)
      (setq inhibit-startup-screen 1)
      (show-paren-mode 1)
      (tool-bar-mode -1)
      (setq-default indent-tabs-mode nil)
      (setq tab-width 2)
      (setq compilation-scroll-output 'first-error)
    #+END_SRC

*** Multiple Cursors
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (use-package multiple-cursors
        :bind (("C->" . 'mc/mark-next-like-this)
               ("C-<" . 'mc/mark-previous-like-this)
               ("C-^" . 'mc/mark-all-like-this)))

    #+END_SRC

*** Visual Regular Expressions
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (use-package visual-regexp
        :bind (("C-M-r" . 'vr/replace)
               ("C-M-q" . 'vr/query-replace)))
      (use-package visual-regexp-steroids
        :bind ("C-M-m" . 'vr/mc-mark))
    #+END_SRC

*** Magit
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (use-package magit
        :bind ("C-x g" . 'magit-status))

    #+END_SRC


*** string-inflection
    #+BEGIN_SRC emacs-lisp :tangle ./init.el
      (use-package string-inflection
        :bind ("C-c i" . 'string-inflection-cycle))
    #+END_SRC

** TODOs

